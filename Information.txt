Entry point of project is : backend/server.js

In app.js
--> export app 
    const express = require("express");
    const app = express();

    module.exports = app;
In server.js
--> import app
const app = require('./app');

for give PORT in app
write code in server.js
app.listen(process.env.PORT,() => {
    console.log(`Server is working on http://localhost:${process.env.PORT}`);
})

make config folder

make config.env file --> PORT = 4000 --> after this in server.js --> (process.env.PORT = 4000)

now how server know that which folder we use for that write below code in server.js 

----------------------------------------------------------------
Download nodeModule --> npm i nodemon 
we use "nodemon" in backend
----------------------------------------------------------------
In package.json file
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node backend/server.js", --------> we start server.js file which is in backend folder
    "dev": "nodemon bckend/server.js" ---------> In this project we use "nodemon" in devlopment-mode and in "production-host" mode we use "node"

  },
----------------------------------------------------------------
Now, make first root
-> "npm run dev"
-> if entire code is correct then our server is working and result we can see on terminal
-> after that go to POSTMAN create new collection "Ecommerece
-> click on + sign which create new root give proper address as below
    http://localhost:4000/api/v1/products
-> After click on "SEND" buttone we able to see o/p in body part

----------------------------------------------------------------
-> connect database using mongodb
-> first make "database.js" file in "config" folder 
-> write below code
const mongoose = require('mongoose');

mongoose.connect("mongo://localhost:27017/Ecommerece", {----> here, instand write "mongo://localhost:27017/Ecommerece" ---> we write process.env.DB_URI ---> resone : when we host project give name of this it more effective bcz, when currently we run it on localserver but when we run it on any online cloud then process of fetch data is become long so
    userNewUrlParser:true,
    userUnifiedTopology:true,
    userCreateIndex:true
}).then((data) => {
    console.log(`Mongodb coneected with server: ${data.connection.host}`)
}).catch((err) => {
    console.log(err)
}); 

-> in config.env ---> make 
DB_URI = "mongo://localhost:27017/Ecommerece"

-> After sucessful connection database --> Mongodb
----------------------------------------------------------------
-> "Making product APIs 
-> make "module" folder
-> 1st: product API
----------------------------------------------------------------
"trtm":in mongoose --> to a field in your schema, then trying to save strings 
like "  hello", or "hello ", or "  hello ", would end up being saved as "hello" in Mongo - i.e. 
white spaces will be removed from both sides of the string.
----------------------------------------------------------------

-> After make "productSchema" we export it from productModel.js
-> import "productSchema" in "Conrollers"

-> Why we do above import - export process?
-> importing the product model into the controller in a MERN stack project is a best practice that follows the MVC pattern 
and provides clear separation of concerns, reusability of code, and easier testing and debugging. This approach contributes 
to a well-structured and maintainable codebase.

-> Other way to do this : Inline Model Methods: Instead of defining separate models and controllers, you could define 
the model methods directly within your controller. This would involve placing the database-related logic directly in 
the controller functions that handle specific routes. While this might simplify the project structure, it can lead to 
code duplication, reduced reusability, and harder-to-maintain code over time.---------> "No effective"
----------------------------------------------------------------

-> After import router of product 
-> now, time to check APT

----------------------------------------------------------------

After complete model of product 

----------------------------------------------------------------
Error Handling in backend ----> make "util" folder and 

-> Error.captureStackTrace()This function is used to customize the stack trace of an error object.
->  it mproving error reporting
-> It's particularly useful when you're defining custom error classes or when you want to provide more meaningful and relevant error information to developers.

----------------------------------------------------------------

Now, Search filter pagination:


